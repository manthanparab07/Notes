			------------------- Storage Media ------------------------

	1. Intro
	
	The first step in managing a storage device is attaching the device to the 
	file system tree.This process, called mounting, allows the device to participate 
	with the operating system.
	
	In Unix-like operating systems, like Linux, maintain a single file system tree with 
	devices attached at various points. 
	
	This contrasts with other operating systems such as Windows that maintain separate
	file system trees for each device (for example C:\, D:\, etc.).
	
	2. Device Mounting During Boot Time 
	
	A file named /etc/fstab lists the devices (typically hard disk partitions) that are 
	to be mounted at boot time.
	
	Content of /etc/fstab :
	
	<file system> 	<mount point>   <type>  <options>       	<dump>  <pass> 
	
	UUID=9a7f6b0b... /               ext4    errors=remount-ro 	0       1

	UUID=f8517e7c... / none          swap    sw              	0       0
	
	Fields Description :
		
		Mount Point : The directory where the device is attached to the file system tree.
	
		File System : Type Linux allows many file system types to be mounted.
				 	  ext3, ext4, FAT16 (msdos), FAT32(vfat), NTFS (ntfs), 
				 	  CD-ROM (iso9660), etc.
	
		Dump		: A single number that specifies if and when a file system is to be
					  backed up with the dump command.
	
		Pass 		: A single number that specifies in what order file systems should 
					  be checked with the fsck command.
	
		Options 	: File systems can be mounted with various options.( read only .. )
	
	
	3. Viewing A List Of Mounted File Systems
	
		The mount command is used to mount file systems. Entering the command without 
		arguments will display a list of the file systems currently mounted:
	
		.
		.
		.
		/dev/sdb1 on /media/hades/HADES type vfat
		(rw,nosuid,nodev,relatime,uid=1000,gid=1000,......)
		
		The format of the listing is: device on mount_point type file_system_type 
		(options).
		
		In above Case :
			
			device		:	/dev/sdb1
			Mount Point	:	/media/hades/Hades
			File S Type	:	vfat( FAT32 )
			Options		:	rw , nodev , ... etc
	
	4. File System Operations 
		
		Step 1.	Be A Super User
				
				sudo -i
			
		Step 2.	Unmount device using device file name( /dev/ )
			
				umount /dev/sdb1
		
		Step 3.	Create a new mount point for the disk.
		
			A mount point is simply a directory somewhere on the file system tree.
			If mounted on a non-empty directory, you will not be able to see the 
			directory's previous contents until you unmount the device. 
			
			Can be any file Directory .
			
		Step 4.	Mount the Device 
			
			mount /dev/sdb1 /home/hades/Downloads/
			
			Syntax mount device_file_name mounting_point_directory 
			
		Step 5. Analyze The Content
			
			ls /home/hades/Downloads/
			
			O/P Content of Device
			
			Directory's previous contents hidden until you unmount the device.
		
		Step 6. Unmount The Device
			
			If any operation is performed on that directory i.e cd ls into the
			mounted directory devices cannot be unmounted till that operation 
			is completed .
			
			Ex. cd /home/hades/Downloads/
				umount /dev/sdb1
					:Error Target is Busy
				
				cd ~
				umount /dev/sdb1
		
	5. Why Unmounting Is Important
		
		free 	: displays statistics about memory usage
		
		 	total        used        free      shared  buff/cache   available
Mem:        3836028      791056      330540    564668  2714432      2216232
Swap:        999420           0      999420
		
		Buffering is used in computers to make them faster.
		
		The need to occasionally read or write data to or from slow devices impede the 
		speed of the system.Operating systems store data that has been read 
		from, and is to be written to storage devices in memory for as long as possible 
		before actually having to interact with the slower device.
		
		On a Linux system for example, you will notice that the system seems to fill
		up memory the longer it is used. This does not mean Linux is “using“ all the 
		memory, it means that Linux is taking advantage of all the available memory to 
		do as much buffering as it can.

		This buffering allows writing to storage devices to be done very quickly, 
		because the writing to the physical device is being deferred to a future time. 
		In the meantime, the data destined for the device is piling up in memory.
		From time to time, the operating system will write this data to the physical 
		device.
		
		Unmounting a device entails writing all the remaining data to the device so
		that it can be safely removed.
		If the device is removed without unmounting it first, the
		possibility exists that not all the data destined for the device has been
		transferred.
		
		In some cases, this data may include vital directory updates, which will lead to
		file system corruption, one of the worst things that can happen on a computer.
	
	6. Determining Device Names
	
		All devices are listed in /dev/ as device files. 
		
		To List all device display content of /dev/
		
			ls /dev/
			
		Contains all mounted and unmounted points.
		
		All the content have similar pattern which list i.e
			
			/dev/sd*	:	SCSI disks. On recent Linux systems, the kernel treats all
							disk like hard disks, USB storage as SCSI disks.
							
		Typical motherboards contain two IDE connectors or channels, each with a cable 
		with two attachment points for drives. The first drive on the cable is
		called the master device and the second is called the slave device.
		
		The device names are ordered such that /dev/sda refers to the master device on
		the first channel, /dev/hdb is the slave device on the first channel;
		/dev/hdc, the master device on the second channel, and so on.
		
		A trailing digit indicates the partition number on the device. 
		For example, /dev/sda1 refers to the first partition on the first hard drive on
		the system while /dev/sda refers to the entire drive.
	
	7. Commands 
	
		● mount 				– Mount a file system
		● umount 				– Unmount a file system
		● fsck 					– Check and repair a file system
		● df( disk free )		– Displays File System
		● fdisk 				– Partition table manipulator
		● mkfs 					– Create a file system
		
	8. Identifying the Mounted Device
		
		If you are working on a system that does not automatically mount removable 
		devices, you can use the following technique to determine how the removable 
		device is named when it is attached.
		
		syslog and kern.log file contains record of system task executions.
		
		Using the tail -f /var/log/kern.log is used to watch what the system is doing 
		in near real-time.
		
		When Mounting Using Command Line always provide a mounting directory to the 
		target device .i.e
		
		mount /dev/sdb1  mounting_directory
		
		/dev/sdb1 is a file 
		
		To Mount A Device 
		
			Step 1. Identify the device 
			
			Step 2. Create a directory that you'll use as the mountpoint for your drive
						
						mkdir /mnt/pd
						
			Step 3. Mount your drive with this command:
				
						mount /dev/sdb1 /mnt/mydrive
			
			Step 4. Now if you run ls /mnt/mydrive, it should list your drive's files.
			
			Step 5. When you're done, don't forget to unmount your USB drive before 
					removing it from the computer:

						umount /dev/sdb1

			
	9. Testing And Repairing File Systems
		
		In /etc/fstab file, Each time the system boots, it routinely checks the 
		integrity of the file systems before mounting them. This is done by the fsck 
		program (short for “file system check”). The last number in each fstab entry
		specifies the order in which the devices are to be checked.The root file 
		system is checked first, followed by the home and boot file systems.
		Devices with a zero as the last digit are not routinely checked.
		In addition to checking the integrity of file systems, fsck can also repair 
		corrupt file systems with varying degrees of success, depending on the amount of 
		damage. On Unix-like file systems, recovered portions of files are placed in the
		lost+found directory, located in the root of each file system.


		To check our flash drive (which should be unmounted first), we could do the
		following:
	
				sudo fsck /dev/sdb1
	
	
	
